// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Single user model (personal finance app)
model User {
  id           String   @id @default(uuid())
  username     String   @unique
  passwordHash String   @map("password_hash")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("users")
}

// Financial institutions (banks, brokerages, etc.)
model Institution {
  id           String    @id @default(uuid())
  name         String    @unique
  type         String?   // bank, brokerage, investment, other
  color        String?   // Hex color for UI
  displayOrder Int       @default(0) @map("display_order")
  createdAt    DateTime  @default(now()) @map("created_at")
  
  accounts     Account[]

  @@map("institutions")
}

// Account types enum
enum AccountType {
  CHECKING
  INVESTMENT
  BROKERAGE_TOTAL
  BROKERAGE_CASH
  BROKERAGE_INVESTMENT
}

// Currency enum
enum Currency {
  EUR
  GBP
  SEK
}

// Individual accounts
model Account {
  id              String      @id @default(uuid())
  institutionId   String      @map("institution_id")
  name            String
  type            AccountType
  currency        Currency
  isDerived       Boolean     @default(false) @map("is_derived")
  parentAccountId String?     @map("parent_account_id")
  displayOrder    Int         @default(0) @map("display_order")
  isActive        Boolean     @default(true) @map("is_active")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  institution     Institution         @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  parentAccount   Account?            @relation("BrokerageAccounts", fields: [parentAccountId], references: [id])
  childAccounts   Account[]           @relation("BrokerageAccounts")
  snapshots       AccountSnapshot[]
  brokerageEntries BrokerageEntry[]

  @@unique([institutionId, name])
  @@index([institutionId])
  @@index([isActive])
  @@map("accounts")
}

// Daily snapshots of account values
model AccountSnapshot {
  id            String   @id @default(uuid())
  accountId     String   @map("account_id")
  date          DateTime @db.Date
  valueOriginal Decimal  @map("value_original") @db.Decimal(15, 2)
  currency      Currency
  valueEur      Decimal  @map("value_eur") @db.Decimal(15, 2)
  exchangeRate  Decimal? @map("exchange_rate") @db.Decimal(10, 6)
  notes         String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  account       Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([accountId, date])
  @@index([date(sort: Desc)])
  @@index([accountId, date(sort: Desc)])
  @@map("account_snapshots")
}

// Brokerage account special handling
model BrokerageEntry {
  id                String   @id @default(uuid())
  brokerageAccountId String   @map("brokerage_account_id")
  date              DateTime @db.Date
  totalValue        Decimal  @map("total_value") @db.Decimal(15, 2)
  cashValue         Decimal  @map("cash_value") @db.Decimal(15, 2)
  // investmentValue calculated as totalValue - cashValue
  currency          Currency
  createdAt         DateTime @default(now()) @map("created_at")

  account           Account  @relation(fields: [brokerageAccountId], references: [id], onDelete: Cascade)

  @@unique([brokerageAccountId, date])
  @@index([date(sort: Desc)])
  @@map("brokerage_entries")
}

// Exchange rates cache
model ExchangeRate {
  id           String   @id @default(uuid())
  date         DateTime @db.Date
  fromCurrency String   @map("from_currency") @db.VarChar(3)
  toCurrency   String   @map("to_currency") @db.VarChar(3)
  rate         Decimal  @db.Decimal(10, 6)
  source       String   @default("exchangerate-api")
  createdAt    DateTime @default(now()) @map("created_at")

  @@unique([date, fromCurrency, toCurrency])
  @@index([date(sort: Desc), fromCurrency, toCurrency])
  @@map("exchange_rates")
}

// Phase 2: Asset tracking
model Asset {
  id           String   @id @default(uuid())
  name         String
  type         String   // vehicle, crypto, property, other
  currency     Currency
  purchasePrice Decimal? @map("purchase_price") @db.Decimal(15, 2)
  purchaseDate DateTime? @map("purchase_date") @db.Date
  notes        String?
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")

  snapshots    AssetSnapshot[]

  @@map("assets")
}

// Asset value snapshots
model AssetSnapshot {
  id            String   @id @default(uuid())
  assetId       String   @map("asset_id")
  date          DateTime @db.Date
  valueOriginal Decimal  @map("value_original") @db.Decimal(15, 2)
  currency      Currency
  valueEur      Decimal  @map("value_eur") @db.Decimal(15, 2)
  exchangeRate  Decimal? @map("exchange_rate") @db.Decimal(10, 6)
  createdAt     DateTime @default(now()) @map("created_at")

  asset         Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@unique([assetId, date])
  @@map("asset_snapshots")
}
